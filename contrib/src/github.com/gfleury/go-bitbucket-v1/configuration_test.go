/*
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package bitbucketv1

import (
	"net/http"
	"reflect"
	"testing"
)

func Test_contextKey_String(t *testing.T) {
	tests := []struct {
		name string
		c    contextKey
		want string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.c.String(); got != tt.want {
				t.Errorf("contextKey.String() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNewConfiguration(t *testing.T) {
	type args struct {
		basePath string
		options  []func(*Configuration)
	}
	tests := []struct {
		name string
		args args
		want *Configuration
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewConfiguration(tt.args.basePath, tt.args.options...); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewConfiguration() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestConfiguration_AddDefaultHeader(t *testing.T) {
	type fields struct {
		BasePath      string
		Host          string
		Scheme        string
		DefaultHeader map[string]string
		UserAgent     string
		HTTPClient    *http.Client
	}
	type args struct {
		key   string
		value string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &Configuration{
				BasePath:      tt.fields.BasePath,
				Host:          tt.fields.Host,
				Scheme:        tt.fields.Scheme,
				DefaultHeader: tt.fields.DefaultHeader,
				UserAgent:     tt.fields.UserAgent,
				HTTPClient:    tt.fields.HTTPClient,
			}
			c.AddDefaultHeader(tt.args.key, tt.args.value)
		})
	}
}
